#!/usr/bin/env python3
"""
Comprehensive demonstration of the M0 Clipper glassmorphism UI system.
Showcases all glassmorphism effects, animations, and cyber enhancements.
"""

import tkinter as tk
from tkinter import ttk
import sys
import os

# Add the project root to path for imports
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from highlighter.glassmorphism import (
    GlassmorphismTheme, 
    GlassPanel, 
    GlassButton, 
    AnimationManager,
    GlassmorphismWindow
)
from highlighter.window_effects import (
    WindowEffects, 
    ModernWindowFrame, 
    GlassmorphismNotification
)
from highlighter.cyber_effects import (
    CyberEnhancedWidget,
    CyberProgressRing,
    MatrixRain,
    HolographicScanline,
    ParticleSystem,
    create_cyber_enhanced_button
)


class GlassmorphismShowcase:
    """Comprehensive showcase of glassmorphism UI capabilities."""
    
    def __init__(self):
        # Create main window
        self.root = tk.Tk()
        self.root.title("M0 Clipper - Glassmorphism UI Showcase")
        self.root.geometry("1400x900")
        self.root.configure(bg="#0A0A0A")
        
        # Initialize theme and effects
        self.theme = GlassmorphismTheme()
        self.animation_manager = AnimationManager(self.theme)
        self.window_effects = WindowEffects(self.root)
        self.notifications = GlassmorphismNotification(self.root)
        
        # Enable window effects
        self.enable_effects()
        
        # Create modern styling
        self.setup_styles()
        
        # Create the showcase interface
        self.create_showcase_ui()
        
        # Demo state
        self.demo_running = False
        
    def enable_effects(self):
        """Enable glassmorphism window effects."""
        try:
            self.window_effects.enable_blur_effect("acrylic")
            self.window_effects.set_window_transparency(0.96)
            self.window_effects.add_drop_shadow()
        except Exception as e:
            print(f"Window effects not available: {e}")
    
    def setup_styles(self):
        """Setup glassmorphism styling."""
        self.style = ttk.Style()
        self.theme.create_glass_style(self.style)
    
    def create_showcase_ui(self):
        """Create the comprehensive showcase interface."""
        # Main container
        main_container = tk.Frame(self.root, bg=self.theme.colors.deep_black)
        main_container.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        main_container.columnconfigure([0, 1, 2], weight=1)
        main_container.rowconfigure([0, 1, 2], weight=1)
        
        # Header showcase
        self.create_header_showcase(main_container)
        
        # Color palette showcase
        self.create_color_showcase(main_container)
        
        # Component showcase
        self.create_component_showcase(main_container)
        
        # Animation showcase
        self.create_animation_showcase(main_container)
        
        # Cyber effects showcase
        self.create_cyber_showcase(main_container)
        
        # Interactive demo panel
        self.create_demo_panel(main_container)\n    \n    def create_header_showcase(self, parent):\n        \"\"\"Create header showcase section.\"\"\"\n        header_panel = GlassPanel(parent, self.theme, \"Glassmorphism Header Demo\")\n        header_panel.grid(row=0, column=0, columnspan=3, sticky=\"ew\", padx=5, pady=5)\n        \n        # Title with modern typography\n        title_label = tk.Label(\n            header_panel.content_frame,\n            text=\"M0 Clipper Ultra-Modern Glassmorphism UI\",\n            bg=self.theme.colors.glass_primary,\n            fg=self.theme.colors.pure_white,\n            font=self.theme.fonts['title']\n        )\n        title_label.pack(pady=(0, 10))\n        \n        subtitle_label = tk.Label(\n            header_panel.content_frame,\n            text=\"Professional Video Highlight Generator with Advanced UI Technology\",\n            bg=self.theme.colors.glass_primary,\n            fg=self.theme.colors.soft_white,\n            font=self.theme.fonts['subtitle']\n        )\n        subtitle_label.pack()\n        \n        # Add cyber effects to title\n        title_effects = CyberEnhancedWidget(title_label)\n        title_effects.add_scanline_effect([\"#FFFFFF\", \"#E0E0E0\"])\n    \n    def create_color_showcase(self, parent):\n        \"\"\"Create color palette showcase.\"\"\"\n        color_panel = GlassPanel(parent, self.theme, \"Color Palette\")\n        color_panel.grid(row=1, column=0, sticky=\"nsew\", padx=5, pady=5)\n        \n        # Color swatches\n        colors_frame = tk.Frame(color_panel.content_frame, bg=self.theme.colors.glass_primary)\n        colors_frame.pack(fill=tk.BOTH, expand=True)\n        \n        # Define color groups\n        color_groups = [\n            (\"Blacks\", [\n                (\"Pure Black\", self.theme.colors.pure_black),\n                (\"Deep Black\", self.theme.colors.deep_black),\n                (\"Dark Black\", self.theme.colors.dark_black),\n                (\"Medium Black\", self.theme.colors.medium_black),\n                (\"Light Black\", self.theme.colors.light_black)\n            ]),\n            (\"Whites\", [\n                (\"Pure White\", self.theme.colors.pure_white),\n                (\"Ice White\", self.theme.colors.ice_white),\n                (\"Silver White\", self.theme.colors.silver_white),\n                (\"Soft White\", self.theme.colors.soft_white),\n                (\"Muted White\", self.theme.colors.muted_white)\n            ]),\n            (\"Glass\", [\n                (\"Primary\", self.theme.colors.glass_primary),\n                (\"Secondary\", self.theme.colors.glass_secondary),\n                (\"Tertiary\", self.theme.colors.glass_tertiary),\n                (\"Hover\", self.theme.colors.glass_hover),\n                (\"Active\", self.theme.colors.glass_active)\n            ])\n        ]\n        \n        for group_name, colors in color_groups:\n            group_frame = tk.LabelFrame(\n                colors_frame,\n                text=group_name,\n                bg=self.theme.colors.glass_primary,\n                fg=self.theme.colors.pure_white,\n                font=self.theme.fonts['heading']\n            )\n            group_frame.pack(fill=tk.X, pady=5)\n            \n            for color_name, color_value in colors:\n                color_row = tk.Frame(group_frame, bg=self.theme.colors.glass_primary)\n                color_row.pack(fill=tk.X, pady=2)\n                \n                # Color swatch\n                swatch = tk.Frame(\n                    color_row,\n                    bg=color_value,\n                    width=30,\n                    height=20,\n                    relief=\"flat\",\n                    bd=1,\n                    highlightbackground=self.theme.colors.border_subtle,\n                    highlightthickness=1\n                )\n                swatch.pack(side=tk.LEFT, padx=(0, 10))\n                swatch.pack_propagate(False)\n                \n                # Color info\n                info_label = tk.Label(\n                    color_row,\n                    text=f\"{color_name}: {color_value}\",\n                    bg=self.theme.colors.glass_primary,\n                    fg=self.theme.colors.pure_white,\n                    font=self.theme.fonts['caption'],\n                    anchor=\"w\"\n                )\n                info_label.pack(side=tk.LEFT, fill=tk.X, expand=True)\n    \n    def create_component_showcase(self, parent):\n        \"\"\"Create component showcase section.\"\"\"\n        component_panel = GlassPanel(parent, self.theme, \"UI Components\")\n        component_panel.grid(row=1, column=1, sticky=\"nsew\", padx=5, pady=5)\n        \n        # Buttons showcase\n        button_frame = tk.LabelFrame(\n            component_panel.content_frame,\n            text=\"Buttons\",\n            bg=self.theme.colors.glass_primary,\n            fg=self.theme.colors.pure_white,\n            font=self.theme.fonts['heading']\n        )\n        button_frame.pack(fill=tk.X, pady=(0, 10))\n        \n        # Primary button\n        primary_btn = GlassButton(\n            button_frame,\n            self.theme,\n            \"Primary Action\",\n            style=\"primary\"\n        )\n        primary_btn.pack(pady=5)\n        \n        # Secondary button\n        secondary_btn = GlassButton(\n            button_frame,\n            self.theme,\n            \"Secondary Action\",\n            style=\"secondary\"\n        )\n        secondary_btn.pack(pady=5)\n        \n        # Input components showcase\n        input_frame = tk.LabelFrame(\n            component_panel.content_frame,\n            text=\"Input Elements\",\n            bg=self.theme.colors.glass_primary,\n            fg=self.theme.colors.pure_white,\n            font=self.theme.fonts['heading']\n        )\n        input_frame.pack(fill=tk.X, pady=(0, 10))\n        \n        # Entry field\n        entry_container = tk.Frame(\n            input_frame,\n            bg=self.theme.colors.glass_secondary,\n            relief='flat',\n            bd=1,\n            highlightbackground=self.theme.colors.border_subtle,\n            highlightthickness=1\n        )\n        entry_container.pack(fill=tk.X, pady=5)\n        \n        demo_entry = tk.Entry(\n            entry_container,\n            bg=self.theme.colors.glass_secondary,\n            fg=self.theme.colors.pure_white,\n            font=self.theme.fonts['body'],\n            relief='flat',\n            bd=0,\n            insertbackground=self.theme.colors.pure_white\n        )\n        demo_entry.pack(fill=tk.X, padx=10, pady=8)\n        demo_entry.insert(0, \"Glassmorphism Text Input\")\n        \n        # Progress indicator\n        progress_frame = tk.LabelFrame(\n            component_panel.content_frame,\n            text=\"Progress Indicators\",\n            bg=self.theme.colors.glass_primary,\n            fg=self.theme.colors.pure_white,\n            font=self.theme.fonts['heading']\n        )\n        progress_frame.pack(fill=tk.X)\n        \n        # Cyber progress ring\n        self.progress_ring = CyberProgressRing(progress_frame, 60, 6)\n        self.progress_ring.pack(pady=10)\n        self.progress_ring.set_indeterminate(True)\n    \n    def create_animation_showcase(self, parent):\n        \"\"\"Create animation showcase section.\"\"\"\n        animation_panel = GlassPanel(parent, self.theme, \"Animations\")\n        animation_panel.grid(row=1, column=2, sticky=\"nsew\", padx=5, pady=5)\n        \n        # Animation controls\n        controls_frame = tk.Frame(animation_panel.content_frame, bg=self.theme.colors.glass_primary)\n        controls_frame.pack(fill=tk.X, pady=(0, 10))\n        \n        # Fade animation demo\n        fade_btn = GlassButton(\n            controls_frame,\n            self.theme,\n            \"Fade Animation\",\n            command=self.demo_fade_animation,\n            style=\"secondary\"\n        )\n        fade_btn.pack(pady=2, fill=tk.X)\n        \n        # Slide animation demo\n        slide_btn = GlassButton(\n            controls_frame,\n            self.theme,\n            \"Slide Animation\",\n            command=self.demo_slide_animation,\n            style=\"secondary\"\n        )\n        slide_btn.pack(pady=2, fill=tk.X)\n        \n        # Morph animation demo\n        morph_btn = GlassButton(\n            controls_frame,\n            self.theme,\n            \"Color Morph\",\n            command=self.demo_morph_animation,\n            style=\"secondary\"\n        )\n        morph_btn.pack(pady=2, fill=tk.X)\n        \n        # Animation target\n        self.animation_target = tk.Label(\n            animation_panel.content_frame,\n            text=\"Animation Target\",\n            bg=self.theme.colors.glass_secondary,\n            fg=self.theme.colors.pure_white,\n            font=self.theme.fonts['heading'],\n            width=20,\n            height=3,\n            relief='flat',\n            bd=1,\n            highlightbackground=self.theme.colors.border_subtle,\n            highlightthickness=1\n        )\n        self.animation_target.pack(pady=10)\n    \n    def create_cyber_showcase(self, parent):\n        \"\"\"Create cyber effects showcase section.\"\"\"\n        cyber_panel = GlassPanel(parent, self.theme, \"Cyber Effects\")\n        cyber_panel.grid(row=2, column=0, columnspan=2, sticky=\"nsew\", padx=5, pady=5)\n        \n        # Cyber effects controls\n        effects_frame = tk.Frame(cyber_panel.content_frame, bg=self.theme.colors.glass_primary)\n        effects_frame.pack(fill=tk.X, pady=(0, 10))\n        effects_frame.columnconfigure([0, 1, 2], weight=1)\n        \n        # Scanline effect\n        scanline_btn = GlassButton(\n            effects_frame,\n            self.theme,\n            \"Scanlines\",\n            command=self.demo_scanlines,\n            style=\"secondary\"\n        )\n        scanline_btn.grid(row=0, column=0, padx=5, sticky=\"ew\")\n        \n        # Particle effect\n        particle_btn = GlassButton(\n            effects_frame,\n            self.theme,\n            \"Particles\",\n            command=self.demo_particles,\n            style=\"secondary\"\n        )\n        particle_btn.grid(row=0, column=1, padx=5, sticky=\"ew\")\n        \n        # Glitch effect\n        glitch_btn = GlassButton(\n            effects_frame,\n            self.theme,\n            \"Glitch\",\n            command=self.demo_glitch,\n            style=\"secondary\"\n        )\n        glitch_btn.grid(row=0, column=2, padx=5, sticky=\"ew\")\n        \n        # Cyber demo area\n        self.cyber_demo_frame = tk.Frame(\n            cyber_panel.content_frame,\n            bg=self.theme.colors.glass_secondary,\n            relief='flat',\n            bd=1,\n            highlightbackground=self.theme.colors.border_subtle,\n            highlightthickness=1,\n            height=150\n        )\n        self.cyber_demo_frame.pack(fill=tk.BOTH, expand=True)\n        self.cyber_demo_frame.pack_propagate(False)\n        \n        # Cyber demo label\n        self.cyber_label = tk.Label(\n            self.cyber_demo_frame,\n            text=\"CYBER EFFECTS DEMO AREA\",\n            bg=self.theme.colors.glass_secondary,\n            fg=self.theme.colors.pure_white,\n            font=self.theme.fonts['title']\n        )\n        self.cyber_label.place(relx=0.5, rely=0.5, anchor=tk.CENTER)\n        \n        # Initialize cyber effects\n        self.cyber_effects = CyberEnhancedWidget(self.cyber_demo_frame)\n    \n    def create_demo_panel(self, parent):\n        \"\"\"Create interactive demo panel.\"\"\"\n        demo_panel = GlassPanel(parent, self.theme, \"Interactive Demo\")\n        demo_panel.grid(row=2, column=2, sticky=\"nsew\", padx=5, pady=5)\n        \n        # Demo controls\n        controls_frame = tk.Frame(demo_panel.content_frame, bg=self.theme.colors.glass_primary)\n        controls_frame.pack(fill=tk.X, pady=(0, 10))\n        \n        # Start demo button\n        self.demo_btn = GlassButton(\n            controls_frame,\n            self.theme,\n            \"Start Full Demo\",\n            command=self.start_full_demo,\n            style=\"primary\"\n        )\n        self.demo_btn.pack(fill=tk.X, pady=5)\n        \n        # Notification demo\n        notification_btn = GlassButton(\n            controls_frame,\n            self.theme,\n            \"Show Notification\",\n            command=self.demo_notification,\n            style=\"secondary\"\n        )\n        notification_btn.pack(fill=tk.X, pady=2)\n        \n        # Window effects demo\n        effects_btn = GlassButton(\n            controls_frame,\n            self.theme,\n            \"Toggle Blur\",\n            command=self.toggle_window_blur,\n            style=\"secondary\"\n        )\n        effects_btn.pack(fill=tk.X, pady=2)\n        \n        # Demo info\n        info_text = tk.Text(\n            demo_panel.content_frame,\n            height=8,\n            wrap=tk.WORD,\n            bg=self.theme.colors.glass_secondary,\n            fg=self.theme.colors.pure_white,\n            font=self.theme.fonts['caption'],\n            relief='flat',\n            bd=0,\n            state='disabled'\n        )\n        info_text.pack(fill=tk.BOTH, expand=True)\n        \n        # Add demo information\n        demo_info = '''\nGlassmorphism UI Features:\n\n• Ultra-modern black & white aesthetic\n• Translucent glass panels with blur effects\n• Smooth animations and transitions\n• Cyber-enhanced visual effects\n• Professional typography system\n• Advanced window effects\n• Responsive hover interactions\n• Modern notification system\n\nExplore all the interactive elements to experience the full glassmorphism aesthetic!'''\n        \n        info_text.configure(state='normal')\n        info_text.insert('1.0', demo_info)\n        info_text.configure(state='disabled')\n    \n    # Demo methods\n    def demo_fade_animation(self):\n        \"\"\"Demonstrate fade animation.\"\"\"\n        self.animation_manager.fade_in(self.animation_target, duration=1000)\n    \n    def demo_slide_animation(self):\n        \"\"\"Demonstrate slide animation.\"\"\"\n        self.animation_manager.slide_in(self.animation_target, \"up\", duration=800)\n    \n    def demo_morph_animation(self):\n        \"\"\"Demonstrate color morphing animation.\"\"\"\n        import random\n        colors = [self.theme.colors.glass_hover, self.theme.colors.glass_active, self.theme.colors.glass_secondary]\n        target_color = random.choice(colors)\n        self.animation_manager.morphing_transition(self.animation_target, target_color, duration=500)\n    \n    def demo_scanlines(self):\n        \"\"\"Demonstrate scanline effects.\"\"\"\n        self.cyber_effects.stop_all_effects()\n        self.cyber_effects.add_scanline_effect([\"#FFFFFF\", \"#E0E0E0\", \"#CCCCCC\"])\n    \n    def demo_particles(self):\n        \"\"\"Demonstrate particle effects.\"\"\"\n        self.cyber_effects.stop_all_effects()\n        self.cyber_effects.add_particle_effect()\n    \n    def demo_glitch(self):\n        \"\"\"Demonstrate glitch effects.\"\"\"\n        self.cyber_effects.add_glitch_effect(2.0)\n    \n    def demo_notification(self):\n        \"\"\"Demonstrate notification system.\"\"\"\n        import random\n        notifications = [\n            (\"System Online\", \"Glassmorphism UI initialized successfully\", \"success\"),\n            (\"Processing\", \"Analyzing video content for highlights\", \"info\"),\n            (\"Warning\", \"Memory usage is approaching limits\", \"warning\"),\n            (\"Error\", \"Failed to process video file\", \"error\")\n        ]\n        \n        title, message, type_name = random.choice(notifications)\n        self.notifications.show_notification(title, message, type_name)\n    \n    def toggle_window_blur(self):\n        \"\"\"Toggle window blur effect.\"\"\"\n        try:\n            if hasattr(self.window_effects, 'is_blur_enabled') and self.window_effects.is_blur_enabled:\n                # Disable blur (simplified - would need platform-specific implementation)\n                self.root.wm_attributes('-alpha', 1.0)\n            else:\n                # Enable blur\n                self.window_effects.enable_blur_effect(\"acrylic\")\n                self.window_effects.set_window_transparency(0.96)\n        except Exception as e:\n            self.notifications.show_notification(\"Window Effects\", f\"Effect not available: {e}\", \"warning\")\n    \n    def start_full_demo(self):\n        \"\"\"Start comprehensive demo sequence.\"\"\"\n        if self.demo_running:\n            return\n            \n        self.demo_running = True\n        self.demo_btn.configure(text=\"Demo Running...\")\n        \n        # Demo sequence\n        def demo_sequence():\n            # Step 1: Notifications\n            self.notifications.show_notification(\"Demo Started\", \"Beginning glassmorphism showcase\", \"info\")\n            \n            self.root.after(1000, lambda: [\n                # Step 2: Animations\n                self.demo_fade_animation(),\n                self.notifications.show_notification(\"Animations\", \"Demonstrating smooth transitions\", \"info\")\n            ])\n            \n            self.root.after(2500, lambda: [\n                # Step 3: Cyber effects\n                self.demo_scanlines(),\n                self.notifications.show_notification(\"Cyber Effects\", \"Activating holographic scanlines\", \"info\")\n            ])\n            \n            self.root.after(4000, lambda: [\n                # Step 4: Particles\n                self.demo_particles(),\n                self.notifications.show_notification(\"Particle System\", \"Engaging particle effects\", \"info\")\n            ])\n            \n            self.root.after(6000, lambda: [\n                # Step 5: Glitch\n                self.demo_glitch(),\n                self.notifications.show_notification(\"Glitch Effect\", \"Applying digital distortion\", \"warning\")\n            ])\n            \n            self.root.after(8000, lambda: [\n                # Step 6: Complete\n                self.notifications.show_notification(\"Demo Complete\", \"Glassmorphism showcase finished!\", \"success\"),\n                self.reset_demo()\n            ])\n        \n        demo_sequence()\n    \n    def reset_demo(self):\n        \"\"\"Reset demo to initial state.\"\"\"\n        self.demo_running = False\n        self.demo_btn.configure(text=\"Start Full Demo\")\n        self.cyber_effects.stop_all_effects()\n    \n    def run(self):\n        \"\"\"Run the glassmorphism showcase.\"\"\"\n        self.root.mainloop()\n\n\ndef main():\n    \"\"\"Main entry point for the glassmorphism showcase.\"\"\"\n    print(\"🎨 Initializing M0 Clipper Glassmorphism Showcase...\")\n    print(\"⚡ Loading ultra-modern UI components...\")\n    \n    showcase = GlassmorphismShowcase()\n    \n    print(\"✨ Glassmorphism UI ready! Launching showcase...\")\n    showcase.run()\n\n\nif __name__ == \"__main__\":\n    main()